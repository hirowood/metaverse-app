services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: metaverse_db
    environment:
      POSTGRES_USER: ${DB_USER:-metaverse}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password123}
      POSTGRES_DB: ${DB_NAME:-metaverse_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-metaverse}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - metaverse_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: metaverse_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - metaverse_network

  # Express Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: metaverse_backend
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 5000
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${DB_USER:-metaverse}
      DB_PASSWORD: ${DB_PASSWORD:-password123}
      DB_NAME: ${DB_NAME:-metaverse_db}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/src:/app/src
    networks:
      - metaverse_network
    command: npm run dev

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: metaverse_frontend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_BACKEND_URL: ${NEXT_PUBLIC_BACKEND_URL:-http://backend:5000}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://backend:5000}
      NEXT_PUBLIC_SOCKET_IO_URL: ${NEXT_PUBLIC_SOCKET_IO_URL:-http://backend:5000}
    depends_on:
      - backend
    networks:
      - metaverse_network

volumes:
  postgres_data:
  redis_data:
  frontend_next:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  metaverse_network:
    driver: bridge
